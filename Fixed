//+------------------------------------------------------------------+
//| Gmoon_EA_XAUUSD_5Layer_Enhanced_Panel.mq5                        |
//|  – Added Pull-back entry filter                                  |
//|  – Trailing: TP1→BE, TP2→TP1-lock, TP3→close-all                |
//+------------------------------------------------------------------+
#property strict
#include <Trade/Trade.mqh>
#include <Controls/Dialog.mqh>
#include <Controls/Button.mqh>
#include <Controls/Label.mqh>

CTrade trade;

// === INPUT PARAMETERS ===
input group "Indicator Settings"
input int EMA_Length = 50;
input int RSI_Length = 14;
input int ADX_Length = 14;
input int ADX_Threshold = 20;
input int ATR_Length = 14;
input int Fractal_Lookback = 5;

input group "TP/SL Settings"
input int FixedSLPips = 300;
input int FixedTPPips = 400;
input int TP2_Pips = 600;
input int TP3_Pips = 900;

input group "Risk Management"
input double Lot_Min = 0.02;
input int Cooldown_Bars = 3;
input double MaxDailyLossPct = 20.0;
input bool EnableTrailingAfterTP1 = true;
input int MaxPositions = 15;

input group "Layer Settings"
input int LayerPipsStep = 200;

input group "Trading Rules"
input bool EnableCandleConfirmation = true;

input group "Pullback Filter"                                      // NEW
input bool   EnablePullbackWait = true;                            // NEW
input int    PullbackMaxBars    = 5;                               // NEW

input group "Time Filters"
input string TradingHours = "00:00-23:59";

input group "Advanced"
ulong MAGIC_BASE_INPUT = 100;
input int MaxMagicOffset = 15;
input bool EnableDebugLog = true;
input bool ShowTradingPanel = true;

// === GLOBAL VARIABLES ===
double EMA, RSI, ADX, ATR, DIp, DIm;
bool BuySignal, SellSignal, CandleBull, CandleBear;
bool AutoTradingEnabled = true;
double PipSize = 0.0;
datetime lastEntryTime = 0;
double LastSupport = 0, LastResistance = 0;
int handleEMA, handleRSI, handleATR, handleADX, fractalHandle;

// Pull-back globals                                                // NEW
datetime lastSignalBarTime = 0;
double   lastSignalHigh    = 0;
double   lastSignalLow     = 0;

// Panel variables
bool panelCreated = false;
int panelWidth = 280;
int panelHeight = 400;
int buttonWidth = 120;
int buttonHeight = 25;
string panelName = "TradingPanel";

// Custom layer
input int CustomLayer_M1 = 3;
input int CustomLayer_M5 = 5;
input int CustomLayer_M15 = 2;
input int CustomLayer_M30 = 2;
input int CustomLayer_H4 = 1;

// Buffer
input double BuySupportBuffer = 0.995;
input double SellResistanceBuffer = 1.001;

// Balance tracking
double initialBalance = 0;
double sessionStartBalance = 0;
datetime sessionStartTime = 0;

//+------------------------------------------------------------------+
// Magic number filter function                                     |
//+------------------------------------------------------------------+
bool IsOurMagic(ulong magic)
{
    ulong tf_bases[] = {110, 120, 130, 140, 150, 160, 999};
    for (int i = 0; i < ArraySize(tf_bases); i++)
        if (magic >= tf_bases[i] && magic < tf_bases[i] + MaxMagicOffset)
            return true;
    return false;
}

//+------------------------------------------------------------------+
// Fungsi Layer Count Berdasarkan TF                                |
//+------------------------------------------------------------------+
int GetLayerCountForTimeframe(ENUM_TIMEFRAMES tf)
{
    switch(tf)
    {
        case PERIOD_M1:   return CustomLayer_M1;
        case PERIOD_M5:   return CustomLayer_M5;
        case PERIOD_M15:  return CustomLayer_M15;
        case PERIOD_M30:  return CustomLayer_M30;
        case PERIOD_H4:   return CustomLayer_H4;
        default:          return 0;
    }
}

//+------------------------------------------------------------------+
//| OnInit function                                                  |
//+------------------------------------------------------------------+
int OnInit()
{
    if (EMA_Length <= 0 || RSI_Length <= 0 || ADX_Length <= 0 || ATR_Length <= 0 || Fractal_Lookback <= 0)
    {
        Print("ERROR: Indicator lengths and lookbacks must be positive. Initialization failed.");
        return INIT_FAILED;
    }
    if (FixedSLPips <= 0 || FixedTPPips <= 0 || TP2_Pips <= 0 || TP3_Pips <= 0 || LayerPipsStep <= 0)
    {
        Print("ERROR: TP/SL and LayerPipsStep must be positive. Initialization failed.");
        return INIT_FAILED;
    }
    if (TP2_Pips <= FixedTPPips || TP3_Pips <= TP2_Pips)
    {
        Print("ERROR: TP levels must be incremental (FixedTPPips < TP2_Pips < TP3_Pips). Initialization failed.");
        return INIT_FAILED;
    }
    if (Cooldown_Bars < 0)
    {
        Print("ERROR: Cooldown_Bars cannot be negative. Initialization failed.");
        return INIT_FAILED;
    }
    if (MaxDailyLossPct < 0.0 || MaxDailyLossPct > 100.0)
    {
        Print("ERROR: MaxDailyLossPct must be between 0 and 100. Initialization failed.");
        return INIT_FAILED;
    }
    if (MaxPositions <= 0)
    {
        Print("ERROR: MaxPositions must be positive. Initialization failed.");
        return INIT_FAILED;
    }

    double minVolume = SymbolInfoDouble(_Symbol, SYMBOL_VOLUME_MIN);
    double volumeStep = SymbolInfoDouble(_Symbol, SYMBOL_VOLUME_STEP);
    if (Lot_Min <= 0 || Lot_Min < minVolume || fmod(Lot_Min, volumeStep) > DBL_EPSILON)
    {
        PrintFormat("ERROR: Lot_Min (%.2f) must be greater than 0, not less than SYMBOL_VOLUME_MIN (%.2f), and a multiple of SYMBOL_VOLUME_STEP (%.2f). Initialization failed.", Lot_Min, minVolume, volumeStep);
        return INIT_FAILED;
    }

    string h[], st[], et[];
    if (StringSplit(TradingHours, '-', h) != 2 || StringSplit(h[0], ':', st) != 2 || StringSplit(h[1], ':', et) != 2)
    {
        Print("ERROR: TradingHours format is invalid. Please use HH:MM-HH:MM (e.g., 09:00-17:00). Initialization failed.");
        return INIT_FAILED;
    }
    int sH = (int)StringToInteger(st[0]);
    int sM = (int)StringToInteger(st[1]);
    int eH = (int)StringToInteger(et[0]);
    int eM = (int)StringToInteger(et[1]);
    if (sH < 0 || sH > 23 || sM < 0 || sM > 59 || eH < 0 || eH > 23 || eM < 0 || eM > 59)
    {
        Print("ERROR: Invalid hour or minute values in TradingHours. Initialization failed.");
        return INIT_FAILED;
    }

    handleEMA = iMA(_Symbol, _Period, EMA_Length, 0, MODE_EMA, PRICE_CLOSE);
    handleRSI = iRSI(_Symbol, _Period, RSI_Length, PRICE_CLOSE);
    handleATR = iATR(_Symbol, _Period, ATR_Length);
    handleADX = iADX(_Symbol, _Period, ADX_Length);
    fractalHandle = iFractals(_Symbol, _Period);

    if(handleEMA == INVALID_HANDLE || handleRSI == INVALID_HANDLE || handleATR == INVALID_HANDLE ||
       handleADX == INVALID_HANDLE || fractalHandle == INVALID_HANDLE)
    {
        Print("ERROR: Failed to get indicator handles. Initialization failed.");
        return INIT_FAILED;
    }

    PipSize = SymbolInfoDouble(_Symbol, SYMBOL_POINT);
    if(_Digits == 3 || _Digits == 5) PipSize *= 10;

    initialBalance = AccountInfoDouble(ACCOUNT_BALANCE);
    sessionStartBalance = initialBalance;
    sessionStartTime = TimeCurrent();

    if(ShowTradingPanel)
    {
        CreateTradingPanel();
        CreateWatermark();

        ObjectSetInteger(0, panelName, OBJPROP_HIDDEN, false);
        ObjectSetInteger(0, panelName + "_Title", OBJPROP_HIDDEN, false);
        ObjectSetInteger(0, panelName + "_BuyBtn", OBJPROP_HIDDEN, false);
        ObjectSetInteger(0, panelName + "_SellBtn", OBJPROP_HIDDEN, false);
        ObjectSetInteger(0, panelName + "_CloseAllBtn", OBJPROP_HIDDEN, false);
        ObjectSetInteger(0, panelName + "_CloseBuyBtn", OBJPROP_HIDDEN, false);
        ObjectSetInteger(0, panelName + "_CloseSellBtn", OBJPROP_HIDDEN, false);
        ObjectSetInteger(0, panelName + "_ResetSessionBtn", OBJPROP_HIDDEN, false);
        ObjectSetInteger(0, panelName + "_AutoTradeBtn", OBJPROP_HIDDEN, false);
        ObjectSetInteger(0, panelName + "_BalanceLabel", OBJPROP_HIDDEN, false);
        ObjectSetInteger(0, panelName + "_EquityLabel", OBJPROP_HIDDEN, false);
        ObjectSetInteger(0, panelName + "_ProfitLabel", OBJPROP_HIDDEN, false);
        ObjectSetInteger(0, panelName + "_PositionsLabel", OBJPROP_HIDDEN, false);
        ObjectSetInteger(0, panelName + "_MaxPosLabel", OBJPROP_HIDDEN, false);
        ObjectSetInteger(0, panelName + "_SignalLabel", OBJPROP_HIDDEN, false);
        ObjectSetInteger(0, panelName + "_EMALabel", OBJPROP_HIDDEN, false);
        ObjectSetInteger(0, panelName + "_RSILabel", OBJPROP_HIDDEN, false);
        ObjectSetInteger(0, panelName + "_ADXLabel", OBJPROP_HIDDEN, false);
        ObjectSetInteger(0, panelName + "_ATRLabel", OBJPROP_HIDDEN, false);
        ObjectSetInteger(0, panelName + "_StatusLabel", OBJPROP_HIDDEN, false);
        ObjectSetInteger(0, panelName + "_Watermark", OBJPROP_HIDDEN, false);
        ObjectSetInteger(0, "Gmoon_Watermark_Main", OBJPROP_HIDDEN, false);
        ObjectSetInteger(0, "Gmoon_Watermark_Corner", OBJPROP_HIDDEN, false);
    }

    return INIT_SUCCEEDED;
}

//+------------------------------------------------------------------+
//| OnDeinit function                                                |
//+------------------------------------------------------------------+
void OnDeinit(const int reason)
{
    DeleteTradingPanel();
    DeleteWatermark();
}

//+------------------------------------------------------------------+
//| OnTick function                                                  |
//+------------------------------------------------------------------+
void OnTick()
{
    double equity = AccountInfoDouble(ACCOUNT_EQUITY);
    double lossThreshold = AccountInfoDouble(ACCOUNT_BALANCE) * (1 - MaxDailyLossPct / 100.0);
    int currentPositions = CountOurPositions();

    if(equity < lossThreshold)
    {
        if(ShowTradingPanel) UpdateTradingPanel();
        if(EnableDebugLog) Print("Daily loss threshold reached. Trading disabled.");
        return;
    }
    if(!IsTradingTime())
    {
        if(ShowTradingPanel) UpdateTradingPanel();
        if(EnableDebugLog) Print("Outside trading hours. Trading disabled.");
        return;
    }
    if(currentPositions >= MaxPositions)
    {
        if(ShowTradingPanel) UpdateTradingPanel();
        if(EnableDebugLog) Print("Maximum positions reached. Trading disabled.");
        return;
    }

    UpdateIndicators();
    DetectCandlePatterns();
    DetectFractals();
    DetectSignals();

    int barsSinceLast = (lastEntryTime == 0) ? Cooldown_Bars : Bars(_Symbol, _Period, lastEntryTime, TimeCurrent());

    bool canBuy  = BuySignal  && (!EnablePullbackWait || IsPullbackConfirmed(ORDER_TYPE_BUY));
    bool canSell = SellSignal && (!EnablePullbackWait || IsPullbackConfirmed(ORDER_TYPE_SELL));

    if(AutoTradingEnabled && barsSinceLast >= Cooldown_Bars && !HasLayeredPositions() && !HasActivePositionsInOppositeDirection())
    {
        if(canBuy && currentPositions < MaxPositions) ExecuteLayeredOrders(ORDER_TYPE_BUY);
        else if(canSell && currentPositions < MaxPositions) ExecuteLayeredOrders(ORDER_TYPE_SELL);
    }

    CheckTPProgressionAndTrailing();
    if(ShowTradingPanel) UpdateTradingPanel();
}

//+------------------------------------------------------------------+
//| Pull-back confirmation                                           |
//+------------------------------------------------------------------+
bool IsPullbackConfirmed(ENUM_ORDER_TYPE type)
{
    if(lastSignalBarTime == 0) return false;
    if(Bars(_Symbol, _Period, lastSignalBarTime, TimeCurrent()) > PullbackMaxBars) return false;

    double bid = SymbolInfoDouble(_Symbol, SYMBOL_BID);
    double ask = SymbolInfoDouble(_Symbol, SYMBOL_ASK);

    if(type == ORDER_TYPE_BUY)
        return bid <= lastSignalHigh && bid >= lastSignalLow;
    else
        return ask <= lastSignalHigh && ask >= lastSignalLow;
}

//+------------------------------------------------------------------+
//| Execute layered orders                                           |
//+------------------------------------------------------------------+
void ExecuteLayeredOrders(ENUM_ORDER_TYPE orderType)
{
    int layerCount = GetLayerCountForTimeframe(_Period);
    if(layerCount <= 0)
    {
        if(EnableDebugLog) PrintFormat("No layers configured for current timeframe %s. Skipping order execution.", EnumToString(_Period));
        return;
    }

    ulong currentTF_MAGIC_BASE;
    switch(_Period)
    {
        case PERIOD_M1:   currentTF_MAGIC_BASE = 110; break;
        case PERIOD_M5:   currentTF_MAGIC_BASE = 120; break;
        case PERIOD_M15:  currentTF_MAGIC_BASE = 130; break;
        case PERIOD_M30:  currentTF_MAGIC_BASE = 140; break;
        case PERIOD_H1:   currentTF_MAGIC_BASE = 150; break;
        case PERIOD_H4:   currentTF_MAGIC_BASE = 160; break;
        default:          currentTF_MAGIC_BASE = 999; break;
    }

    double price = (orderType == ORDER_TYPE_BUY) ? SymbolInfoDouble(_Symbol, SYMBOL_ASK)
                                                  : SymbolInfoDouble(_Symbol, SYMBOL_BID);

    for(int i = 0; i < layerCount; i++)
    {
        if(CountOurPositions() >= MaxPositions)
        {
            if(EnableDebugLog) Print("Reached MaxPositions. Stopping layer execution.");
            break;
        }
        if (i >= MaxMagicOffset)
        {
            if(EnableDebugLog) PrintFormat("Warning: Skipping layer %d because it exceeds MaxMagicOffset (%d).", i+1, MaxMagicOffset);
            break;
        }

        double sl = (orderType == ORDER_TYPE_BUY) ? price - PipToPrice(FixedSLPips)
                                                  : price + PipToPrice(FixedSLPips);
        double tp = (orderType == ORDER_TYPE_BUY) ? price + PipToPrice(TP3_Pips)   // only TP3
                                                  : price - PipToPrice(TP3_Pips); // in TP

        sl = NormalizeDouble(sl, _Digits);
        tp = NormalizeDouble(tp, _Digits);

        trade.SetExpertMagicNumber(currentTF_MAGIC_BASE + i);
        bool result = (orderType == ORDER_TYPE_BUY)
                      ? trade.Buy(Lot_Min, _Symbol, 0.0, sl, tp, "Layer" + IntegerToString(i+1))
                      : trade.Sell(Lot_Min, _Symbol, 0.0, sl, tp, "Layer" + IntegerToString(i+1));

        if(!result && EnableDebugLog)
            PrintFormat("Order failed for TF=%s Layer %d %s. Error: %d - %s",
                        EnumToString(_Period), i+1, (orderType == ORDER_TYPE_BUY ? "BUY" : "SELL"),
                        trade.ResultRetcode(), trade.ResultComment());
    }

    lastEntryTime = TimeCurrent();
}

//+------------------------------------------------------------------+
//| TP / SL progression – NEW LOGIC                                 |
//+------------------------------------------------------------------+
void CheckTPProgressionAndTrailing()
{
   for(int i=PositionsTotal()-1;i>=0;i--)
   {
      ulong ticket=PositionGetTicket(i);
      if(ticket==0 || !PositionSelectByTicket(ticket)) continue;
      if(PositionGetString(POSITION_SYMBOL)!=_Symbol) continue;
      if(!IsOurMagic((ulong)PositionGetInteger(POSITION_MAGIC))) continue;

      double entry   = PositionGetDouble(POSITION_PRICE_OPEN);
      double current = PositionGetDouble(POSITION_PRICE_CURRENT);
      double sl      = PositionGetDouble(POSITION_SL);
      ENUM_POSITION_TYPE type = (ENUM_POSITION_TYPE)PositionGetInteger(POSITION_TYPE);

      double tp1 = (type==POSITION_TYPE_BUY) ? entry + PipToPrice(FixedTPPips)
                                             : entry - PipToPrice(FixedTPPips);
      double tp2 = (type==POSITION_TYPE_BUY) ? entry + PipToPrice(TP2_Pips)
                                             : entry - PipToPrice(TP2_Pips);
      double tp3 = (type==POSITION_TYPE_BUY) ? entry + PipToPrice(TP3_Pips)
                                             : entry - PipToPrice(TP3_Pips);

      // TP3 – close all
      if((type==POSITION_TYPE_BUY && current>=tp3) ||
         (type==POSITION_TYPE_SELL && current<=tp3))
      {
         if(trade.PositionClose(ticket) && EnableDebugLog)
            Print("TP3 full close ticket=",ticket);
         continue;
      }

      // TP2 – move SL to TP1
      if((type==POSITION_TYPE_BUY && current>=tp2) ||
         (type==POSITION_TYPE_SELL && current<=tp2))
      {
         double newSL=NormalizeDouble(tp1,_Digits);
         if((type==POSITION_TYPE_BUY && newSL>sl) ||
            (type==POSITION_TYPE_SELL && newSL<sl))
         {
            trade.PositionModify(ticket,newSL,PositionGetDouble(POSITION_TP));
            if(EnableDebugLog)
               PrintFormat("TP2 hit ticket=%u  SL moved to TP1=%.*f",ticket,_Digits,newSL);
         }
      }
      // TP1 – move SL to break-even (only if TP2 not yet hit)
      else if((type==POSITION_TYPE_BUY && current>=tp1) ||
              (type==POSITION_TYPE_SELL && current<=tp1))
      {
         double newSL=NormalizeDouble(entry,_Digits);
         if((type==POSITION_TYPE_BUY && newSL>sl) ||
            (type==POSITION_TYPE_SELL && newSL<sl))
         {
            trade.PositionModify(ticket,newSL,PositionGetDouble(POSITION_TP));
            if(EnableDebugLog)
               PrintFormat("TP1 hit ticket=%u  SL moved to BE=%.*f",ticket,_Digits,newSL);
         }
      }

      // Optional trailing after TP1
      if(EnableTrailingAfterTP1)
      {
         double trailDist=PipToPrice(FixedSLPips);
         double newSL=(type==POSITION_TYPE_BUY)
                        ?NormalizeDouble(current-trailDist,_Digits)
                        :NormalizeDouble(current+trailDist,_Digits);
         if((type==POSITION_TYPE_BUY && newSL>sl && newSL>entry) ||
            (type==POSITION_TYPE_SELL && newSL<sl && newSL<entry))
         {
            trade.PositionModify(ticket,newSL,PositionGetDouble(POSITION_TP));
            if(EnableDebugLog)
               PrintFormat("Trailing ticket=%u  SL=%.*f  price=%.*f",ticket,_Digits,newSL,_Digits,current);
         }
      }
   }
}

//+------------------------------------------------------------------+
//| OnChartEvent                                                     |
//+------------------------------------------------------------------+
void OnChartEvent(const int id, const long &lparam, const double &dparam, const string &sparam)
{
    if(id == CHARTEVENT_OBJECT_CLICK)
    {
        if(sparam == panelName + "_BuyBtn")
        {
            ManualBuy();
            ObjectSetInteger(0, sparam, OBJPROP_STATE, false);
        }
        else if(sparam == panelName + "_SellBtn")
        {
            ManualSell();
            ObjectSetInteger(0, sparam, OBJPROP_STATE, false);
        }
        else if(sparam == panelName + "_CloseAllBtn")
        {
            CloseAllPositions();
            ObjectSetInteger(0, sparam, OBJPROP_STATE, false);
        }
        else if(sparam == panelName + "_CloseBuyBtn")
        {
            ClosePositionsByType(POSITION_TYPE_BUY);
            ObjectSetInteger(0, sparam, OBJPROP_STATE, false);
        }
        else if(sparam == panelName + "_CloseSellBtn")
        {
            ClosePositionsByType(POSITION_TYPE_SELL);
            ObjectSetInteger(0, sparam, OBJPROP_STATE, false);
        }
        else if(sparam == panelName + "_ResetSessionBtn")
        {
            ResetSessionStats();
            ObjectSetInteger(0, sparam, OBJPROP_STATE, false);
        }
        else if(sparam == panelName + "_AutoTradeBtn")
        {
            ToggleAutoTrading();
            ObjectSetInteger(0, sparam, OBJPROP_STATE, false);
        }
        ChartRedraw();
    }
}

//+------------------------------------------------------------------+
//| Watermark creation functions                                     |
//+------------------------------------------------------------------+
void CreateWatermark()
{
    ObjectCreate(0, "Gmoon_Watermark_Main", OBJ_LABEL, 0, 0, 0);
    ObjectSetInteger(0, "Gmoon_Watermark_Main", OBJPROP_CORNER, CORNER_LEFT_UPPER);
    ObjectSetInteger(0, "Gmoon_Watermark_Main", OBJPROP_XDISTANCE, (int)(ChartGetInteger(0, CHART_WIDTH_IN_PIXELS) / 2) - 50);
    ObjectSetInteger(0, "Gmoon_Watermark_Main", OBJPROP_YDISTANCE, (int)(ChartGetInteger(0, CHART_HEIGHT_IN_PIXELS) / 2));
    ObjectSetString(0, "Gmoon_Watermark_Main", OBJPROP_TEXT, "GMOON");
    ObjectSetString(0, "Gmoon_Watermark_Main", OBJPROP_FONT, "Arial Black");
    ObjectSetInteger(0, "Gmoon_Watermark_Main", OBJPROP_FONTSIZE, 48);
    ObjectSetInteger(0, "Gmoon_Watermark_Main", OBJPROP_COLOR, C'40,40,40');
    ObjectSetInteger(0, "Gmoon_Watermark_Main", OBJPROP_BACK, true);
    ObjectSetInteger(0, "Gmoon_Watermark_Main", OBJPROP_SELECTABLE, false);
    ObjectSetInteger(0, "Gmoon_Watermark_Main", OBJPROP_SELECTED, false);
    ObjectSetInteger(0, "Gmoon_Watermark_Main", OBJPROP_ZORDER, -1);

    ObjectCreate(0, "Gmoon_Watermark_Corner", OBJ_LABEL, 0, 0, 0);
    ObjectSetInteger(0, "Gmoon_Watermark_Corner", OBJPROP_CORNER, CORNER_RIGHT_UPPER);
    ObjectSetInteger(0, "Gmoon_Watermark_Corner", OBJPROP_XDISTANCE, 10);
    ObjectSetInteger(0, "Gmoon_Watermark_Corner", OBJPROP_YDISTANCE, 10);
    ObjectSetString(0, "Gmoon_Watermark_Corner", OBJPROP_TEXT, "© Gmoon EA");
    ObjectSetString(0, "Gmoon_Watermark_Corner", OBJPROP_FONT, "Arial");
    ObjectSetInteger(0, "Gmoon_Watermark_Corner", OBJPROP_FONTSIZE, 10);
    ObjectSetInteger(0, "Gmoon_Watermark_Corner", OBJPROP_COLOR, clrDimGray);
    ObjectSetInteger(0, "Gmoon_Watermark_Corner", OBJPROP_BACK, false);
    ObjectSetInteger(0, "Gmoon_Watermark_Corner", OBJPROP_SELECTABLE, false);
    ObjectSetInteger(0, "Gmoon_Watermark_Corner", OBJPROP_SELECTED, false);
    ObjectSetInteger(0, "Gmoon_Watermark_Corner", OBJPROP_ZORDER, 1);

    ObjectCreate(0, panelName + "_Watermark", OBJ_LABEL, 0, 0, 0);
    ObjectSetInteger(0, panelName + "_Watermark", OBJPROP_XDISTANCE, 200);
    ObjectSetInteger(0, panelName + "_Watermark", OBJPROP_YDISTANCE, 385);
    ObjectSetString(0, panelName + "_Watermark", OBJPROP_TEXT, "by Gmoon");
    ObjectSetString(0, panelName + "_Watermark", OBJPROP_FONT, "Arial");
    ObjectSetInteger(0, panelName + "_Watermark", OBJPROP_FONTSIZE, 8);
    ObjectSetInteger(0, panelName + "_Watermark", OBJPROP_COLOR, clrSilver);
    ObjectSetInteger(0, panelName + "_Watermark", OBJPROP_CORNER, CORNER_LEFT_UPPER);
    ObjectSetInteger(0, panelName + "_Watermark", OBJPROP_ANCHOR, ANCHOR_LEFT_UPPER);
}

void DeleteWatermark()
{
    ObjectDelete(0, "Gmoon_Watermark_Main");
    ObjectDelete(0, "Gmoon_Watermark_Corner");
    ObjectDelete(0, panelName + "_Watermark");
}

//+------------------------------------------------------------------+
//| Panel creation functions                                         |
//+------------------------------------------------------------------+
void CreateTradingPanel()
{
    if(panelCreated) return;

    int x = 20;
    int y = 20;

    ObjectCreate(0, panelName, OBJ_RECTANGLE_LABEL, 0, 0, 0);
    ObjectSetInteger(0, panelName, OBJPROP_XDISTANCE, x);
    ObjectSetInteger(0, panelName, OBJPROP_YDISTANCE, y);
    ObjectSetInteger(0, panelName, OBJPROP_XSIZE, panelWidth);
    ObjectSetInteger(0, panelName, OBJPROP_YSIZE, panelHeight);
    ObjectSetInteger(0, panelName, OBJPROP_BGCOLOR, clrDarkSlateGray);
    ObjectSetInteger(0, panelName, OBJPROP_BORDER_TYPE, BORDER_FLAT);
    ObjectSetInteger(0, panelName, OBJPROP_CORNER, CORNER_LEFT_UPPER);
    ObjectSetInteger(0, panelName, OBJPROP_COLOR, clrWhite);
    ObjectSetInteger(0, panelName, OBJPROP_STYLE, STYLE_SOLID);
    ObjectSetInteger(0, panelName, OBJPROP_WIDTH, 1);
    ObjectSetInteger(0, panelName, OBJPROP_BACK, false);
    ObjectSetInteger(0, panelName, OBJPROP_SELECTABLE, false);
    ObjectSetInteger(0, panelName, OBJPROP_SELECTED, false);
    ObjectSetInteger(0, panelName, OBJPROP_ZORDER, 0);

    ObjectCreate(0, panelName + "_Title", OBJ_LABEL, 0, 0, 0);
    ObjectSetInteger(0, panelName + "_Title", OBJPROP_XDISTANCE, x + 10);
    ObjectSetInteger(0, panelName + "_Title", OBJPROP_YDISTANCE, y + 5);
    ObjectSetString(0, panelName + "_Title", OBJPROP_TEXT, "Gmoon EA Panel");
    ObjectSetString(0, panelName + "_Title", OBJPROP_FONT, "Arial Bold");
    ObjectSetInteger(0, panelName + "_Title", OBJPROP_FONTSIZE, 12);
    ObjectSetInteger(0, panelName + "_Title", OBJPROP_COLOR, clrWhite);

    CreateButton(panelName + "_BuyBtn", "Manual BUY", x + 10, y + 30, buttonWidth, buttonHeight, clrGreen);
    CreateButton(panelName + "_SellBtn", "Manual SELL", x + 140, y + 30, buttonWidth, buttonHeight, clrRed);
    CreateButton(panelName + "_CloseAllBtn", "Close ALL", x + 10, y + 65, buttonWidth, buttonHeight, clrOrange);
    CreateButton(panelName + "_CloseBuyBtn", "Close BUY", x + 140, y + 65, buttonWidth, buttonHeight, clrOrange);
    CreateButton(panelName + "_CloseSellBtn", "Close SELL", x + 10, y + 100, buttonWidth, buttonHeight, clrOrange);
    CreateButton(panelName + "_ResetSessionBtn", "Reset Session", x + 140, y + 100, buttonWidth, buttonHeight, clrBlue);
    CreateButton(panelName + "_AutoTradeBtn", "Auto: ON", x + 75, y + 135, 130, buttonHeight, clrGreen);

    CreateLabel(panelName + "_BalanceLabel", "Balance: ", x + 10, y + 170);
    CreateLabel(panelName + "_EquityLabel", "Equity: ", x + 10, y + 190);
    CreateLabel(panelName + "_ProfitLabel", "Session P/L: ", x + 10, y + 210);
    CreateLabel(panelName + "_PositionsLabel", "Positions: ", x + 10, y + 230);
    CreateLabel(panelName + "_MaxPosLabel", "Max Positions: ", x + 10, y + 250);
    CreateLabel(panelName + "_SignalLabel", "Signal: ", x + 10, y + 270);
    CreateLabel(panelName + "_EMALabel", "EMA: ", x + 10, y + 290);
    CreateLabel(panelName + "_RSILabel", "RSI: ", x + 10, y + 310);
    CreateLabel(panelName + "_ADXLabel", "ADX: ", x + 10, y + 330);
    CreateLabel(panelName + "_ATRLabel", "ATR: ", x + 10, y + 350);
    CreateLabel(panelName + "_StatusLabel", "Status: ", x + 10, y + 370);

    CreateLabel(panelName + "_PanelWatermark", "by Gmoon", x + 200, y + 385);
    ObjectSetInteger(0, panelName + "_PanelWatermark", OBJPROP_FONTSIZE, 8);
    ObjectSetInteger(0, panelName + "_PanelWatermark", OBJPROP_COLOR, clrSilver);

    panelCreated = true;
}

//+------------------------------------------------------------------+
void CreateButton(string name, string text, int x, int y, int width, int height, color bgColor)
{
    ObjectCreate(0, name, OBJ_BUTTON, 0, 0, 0);
    ObjectSetInteger(0, name, OBJPROP_XDISTANCE, x);
    ObjectSetInteger(0, name, OBJPROP_YDISTANCE, y);
    ObjectSetInteger(0, name, OBJPROP_XSIZE, width);
    ObjectSetInteger(0, name, OBJPROP_YSIZE, height);
    ObjectSetString(0, name, OBJPROP_TEXT, text);
    ObjectSetString(0, name, OBJPROP_FONT, "Arial");
    ObjectSetInteger(0, name, OBJPROP_FONTSIZE, 9);
    ObjectSetInteger(0, name, OBJPROP_COLOR, clrWhite);
    ObjectSetInteger(0, name, OBJPROP_BGCOLOR, bgColor);
    ObjectSetInteger(0, name, OBJPROP_BORDER_COLOR, clrBlack);
    ObjectSetInteger(0, name, OBJPROP_BACK, false);
    ObjectSetInteger(0, name, OBJPROP_STATE, false);
    ObjectSetInteger(0, name, OBJPROP_SELECTABLE, false);
    ObjectSetInteger(0, name, OBJPROP_SELECTED, false);
    ObjectSetInteger(0, name, OBJPROP_ZORDER, 1);
}

//+------------------------------------------------------------------+
void CreateLabel(string name, string text, int x, int y)
{
    ObjectCreate(0, name, OBJ_LABEL, 0, 0, 0);
    ObjectSetInteger(0, name, OBJPROP_XDISTANCE, x);
    ObjectSetInteger(0, name, OBJPROP_YDISTANCE, y);
    ObjectSetString(0, name, OBJPROP_TEXT, text);
    ObjectSetString(0, name, OBJPROP_FONT, "Arial");
    ObjectSetInteger(0, name, OBJPROP_FONTSIZE, 9);
    ObjectSetInteger(0, name, OBJPROP_COLOR, clrWhite);
    ObjectSetInteger(0, name, OBJPROP_CORNER, CORNER_LEFT_UPPER);
    ObjectSetInteger(0, name, OBJPROP_ANCHOR, ANCHOR_LEFT_UPPER);
}

//+------------------------------------------------------------------+
//| Panel update functions                                           |
//+------------------------------------------------------------------+
void UpdateTradingPanel()
{
    if(!panelCreated) return;

    double balance = AccountInfoDouble(ACCOUNT_BALANCE);
    double equity  = AccountInfoDouble(ACCOUNT_EQUITY);
    double sessionProfit = equity - sessionStartBalance;
    int positions = CountOurPositions();

    ObjectSetString(0, panelName + "_BalanceLabel", OBJPROP_TEXT, "Balance: $" + DoubleToString(balance, 2));
    ObjectSetString(0, panelName + "_EquityLabel", OBJPROP_TEXT, "Equity: $" + DoubleToString(equity, 2));
    ObjectSetString(0, panelName + "_ProfitLabel", OBJPROP_TEXT, "Session P/L: $" + DoubleToString(sessionProfit, 2));
    ObjectSetString(0, panelName + "_PositionsLabel", OBJPROP_TEXT, "Positions: " + IntegerToString(positions));
    ObjectSetString(0, panelName + "_MaxPosLabel", OBJPROP_TEXT, "Max Positions: " + IntegerToString(MaxPositions));

    string signal = "NONE";
    if(BuySignal) signal = "BUY";
    else if(SellSignal) signal = "SELL";
    ObjectSetString(0, panelName + "_SignalLabel", OBJPROP_TEXT, "Signal: " + signal);

    ObjectSetString(0, panelName + "_EMALabel", OBJPROP_TEXT, "EMA: " + DoubleToString(EMA, _Digits));
    ObjectSetString(0, panelName + "_RSILabel", OBJPROP_TEXT, "RSI: " + DoubleToString(RSI, 2));
    ObjectSetString(0, panelName + "_ADXLabel", OBJPROP_TEXT, "ADX: " + DoubleToString(ADX, 2));
    ObjectSetString(0, panelName + "_ATRLabel", OBJPROP_TEXT, "ATR: " + DoubleToString(ATR, _Digits));

    string status = "ACTIVE";
    if(!AutoTradingEnabled) status = "AUTO OFF";
    else if(positions >= MaxPositions) status = "MAX POSITIONS";
    else if(!IsTradingTime()) status = "OUTSIDE HOURS";
    else if(equity < AccountInfoDouble(ACCOUNT_BALANCE) * (1 - MaxDailyLossPct / 100.0)) status = "DAILY LOSS LIMIT";
    ObjectSetString(0, panelName + "_StatusLabel", OBJPROP_TEXT, "Status: " + status);

    string autoText = AutoTradingEnabled ? "Auto: ON" : "Auto: OFF";
    color autoColor = AutoTradingEnabled ? clrGreen : clrRed;
    ObjectSetString(0, panelName + "_AutoTradeBtn", OBJPROP_TEXT, autoText);
    ObjectSetInteger(0, panelName + "_AutoTradeBtn", OBJPROP_BGCOLOR, autoColor);
}

//+------------------------------------------------------------------+
//| Panel deletion functions                                         |
//+------------------------------------------------------------------+
void DeleteTradingPanel()
{
    if(!panelCreated) return;
    ObjectDelete(0, panelName);
    ObjectDelete(0, panelName + "_Title");
    ObjectDelete(0, panelName + "_BuyBtn");
    ObjectDelete(0, panelName + "_SellBtn");
    ObjectDelete(0, panelName + "_CloseAllBtn");
    ObjectDelete(0, panelName + "_CloseBuyBtn");
    ObjectDelete(0, panelName + "_CloseSellBtn");
    ObjectDelete(0, panelName + "_ResetSessionBtn");
    ObjectDelete(0, panelName + "_AutoTradeBtn");
    ObjectDelete(0, panelName + "_BalanceLabel");
    ObjectDelete(0, panelName + "_EquityLabel");
    ObjectDelete(0, panelName + "_ProfitLabel");
    ObjectDelete(0, panelName + "_PositionsLabel");
    ObjectDelete(0, panelName + "_MaxPosLabel");
    ObjectDelete(0, panelName + "_SignalLabel");
    ObjectDelete(0, panelName + "_EMALabel");
    ObjectDelete(0, panelName + "_RSILabel");
    ObjectDelete(0, panelName + "_ADXLabel");
    ObjectDelete(0, panelName + "_ATRLabel");
    ObjectDelete(0, panelName + "_StatusLabel");
    ObjectDelete(0, panelName + "_PanelWatermark");
    panelCreated = false;
}

//+------------------------------------------------------------------+
//| Manual trading and control functions                             |
//+------------------------------------------------------------------+
void ToggleAutoTrading()
{
    AutoTradingEnabled = !AutoTradingEnabled;
    string status = AutoTradingEnabled ? "enabled" : "disabled";
    Print("Auto trading ", status);
    if(ShowTradingPanel) UpdateTradingPanel();
}

void ManualBuy()
{
    if(CountOurPositions() >= MaxPositions)
    {
        Print("Cannot open BUY - Maximum positions reached");
        return;
    }
    ExecuteLayeredOrders(ORDER_TYPE_BUY);
}

void ManualSell()
{
    if(CountOurPositions() >= MaxPositions)
    {
        Print("Cannot open SELL - Maximum positions reached");
        return;
    }
    ExecuteLayeredOrders(ORDER_TYPE_SELL);
}

void CloseAllPositions()
{
    for(int i = PositionsTotal() - 1; i >= 0; i--)
    {
        ulong ticket = PositionGetTicket(i);
        if(ticket == 0 || !PositionSelectByTicket(ticket)) continue;
        if(PositionGetString(POSITION_SYMBOL) != _Symbol) continue;
        ulong magic = (ulong)PositionGetInteger(POSITION_MAGIC);
        if(IsOurMagic(magic))
        {
            if(!trade.PositionClose(ticket))
            {
                if(EnableDebugLog) PrintFormat("Failed to close position %u. Error: %d - %s", ticket, trade.ResultRetcode(), trade.ResultComment());
            }
        }
    }
    Print("All positions closed manually");
}

void ClosePositionsByType(ENUM_POSITION_TYPE type)
{
    for(int i = PositionsTotal() - 1; i >= 0; i--)
    {
        ulong ticket = PositionGetTicket(i);
        if(ticket == 0 || !PositionSelectByTicket(ticket)) continue;
        if(PositionGetString(POSITION_SYMBOL) != _Symbol) continue;
        if(PositionGetInteger(POSITION_TYPE) != type) continue;
        ulong magic = (ulong)PositionGetInteger(POSITION_MAGIC);
        if(IsOurMagic(magic))
        {
            if(!trade.PositionClose(ticket))
            {
                if(EnableDebugLog) PrintFormat("Failed to close position %u. Error: %d - %s", ticket, trade.ResultRetcode(), trade.ResultComment());
            }
        }
    }
    string typeStr = (type == POSITION_TYPE_BUY) ? "BUY" : "SELL";
    Print("All ", typeStr, " positions closed manually");
}

void ResetSessionStats()
{
    sessionStartBalance = AccountInfoDouble(ACCOUNT_BALANCE);
    sessionStartTime = TimeCurrent();
    Print("Session statistics reset");
}

int CountOurPositions()
{
    int count = 0;
    for(int i = PositionsTotal() - 1; i >= 0; i--)
    {
        ulong ticket = PositionGetTicket(i);
        if(ticket == 0 || !PositionSelectByTicket(ticket)) continue;
        if(PositionGetString(POSITION_SYMBOL) != _Symbol) continue;
        if(IsOurMagic(PositionGetInteger(POSITION_MAGIC)))
            count++;
    }
    return count;
}

//+------------------------------------------------------------------+
// Indicator update and signal detection functions                    |
//+------------------------------------------------------------------+
void UpdateIndicators()
{
    double ema[1], rsi[1], atr[1], adx[1], diPlus[1], diMinus[1];
    CopyBuffer(handleEMA, 0, 0, 1, ema);
    CopyBuffer(handleRSI, 0, 0, 1, rsi);
    CopyBuffer(handleATR, 0, 0, 1, atr);
    CopyBuffer(handleADX, 0, 0, 1, adx);
    CopyBuffer(handleADX, 1, 0, 1, diPlus);
    CopyBuffer(handleADX, 2, 0, 1, diMinus);

    EMA = ema[0]; RSI = rsi[0]; ATR = atr[0];
    ADX = adx[0]; DIp = diPlus[0]; DIm = diMinus[0];
}

void DetectCandlePatterns()
{
    double o0 = iOpen(_Symbol, _Period, 0), c0 = iClose(_Symbol, _Period, 0);
    double h0 = iHigh(_Symbol, _Period, 0), l0 = iLow(_Symbol, _Period, 0);
    double body = MathAbs(c0 - o0);
    double range = h0 - l0;
    double upperWick = h0 - MathMax(c0, o0);
    double lowerWick = MathMin(c0, o0) - l0;

    bool isBullishPinbar = (c0 > o0) && (lowerWick > upperWick * 2.0) && (body < range * 0.3);
    bool isBearishPinbar = (o0 > c0) && (upperWick > lowerWick * 2.0) && (body < range * 0.3);

    CandleBull = isBullishPinbar;
    CandleBear = isBearishPinbar;
}

void DetectFractals()
{
    double upper[], lower[];
    ArraySetAsSeries(upper, true); ArraySetAsSeries(lower, true);
    CopyBuffer(fractalHandle, 0, 0, Fractal_Lookback * 2 + 1, upper);
    CopyBuffer(fractalHandle, 1, 0, Fractal_Lookback * 2 + 1, lower);

    LastSupport = EMA - ATR * 2;
    LastResistance = EMA + ATR * 2;

    for(int i = Fractal_Lookback; i < Fractal_Lookback * 2 + 1; i++)
    {
        if(lower[i] > 0 && lower[i] < SymbolInfoDouble(_Symbol, SYMBOL_ASK))
        {
            LastSupport = lower[i];
            break;
        }
    }
    for(int i = Fractal_Lookback; i < Fractal_Lookback * 2 + 1; i++)
    {
        if(upper[i] > 0 && upper[i] > SymbolInfoDouble(_Symbol, SYMBOL_BID))
        {
            LastResistance = upper[i];
            break;
        }
    }
}

void DetectSignals()
{
    double bid = SymbolInfoDouble(_Symbol, SYMBOL_BID);
    double ask = SymbolInfoDouble(_Symbol, SYMBOL_ASK);

    BuySignal  = bid > EMA && RSI > 50 && ADX > ADX_Threshold && DIp > DIm &&
                 bid > LastSupport * BuySupportBuffer &&
                 (!EnableCandleConfirmation || CandleBull);

    SellSignal = ask < EMA && RSI < 50 && ADX > ADX_Threshold && DIm > DIp &&
                 ask < LastResistance * SellResistanceBuffer &&
                 (!EnableCandleConfirmation || CandleBear);

    if((BuySignal || SellSignal) && Time[0] != lastSignalBarTime)
    {
        lastSignalBarTime = Time[0];
        lastSignalHigh    = High[0];
        lastSignalLow     = Low[0];
    }
}

double PipToPrice(int pips) { return pips * PipSize; }

//+------------------------------------------------------------------+
//| Time filter function                                             |
//+------------------------------------------------------------------+
bool IsTradingTime()
{
    MqlDateTime dt; TimeToStruct(TimeCurrent(), dt);
    string h[];
    if(StringSplit(TradingHours, '-', h) != 2) return false;

    string st[], et[];
    if (StringSplit(h[0], ':', st) != 2 || StringSplit(h[1], ':', et) != 2) return false;

    int sH = (int)StringToInteger(st[0]), sM = (int)StringToInteger(st[1]);
    int eH = (int)StringToInteger(et[0]), eM = (int)StringToInteger(et[1]);

    int nowMin = dt.hour * 60 + dt.min;
    int sMin   = sH * 60 + sM;
    int eMin   = eH * 60 + eM;

    return (sMin <= eMin) ? (nowMin >= sMin && nowMin <= eMin) : (nowMin >= sMin || nowMin <= eMin);
}

//+------------------------------------------------------------------+
//| Position checking functions                                      |
//+------------------------------------------------------------------+
bool HasActivePositionsInOppositeDirection()
{
    return (BuySignal && HasPositions(POSITION_TYPE_SELL)) ||
           (SellSignal && HasPositions(POSITION_TYPE_BUY));
}

bool HasPositions(ENUM_POSITION_TYPE type)
{
    for(int i = PositionsTotal() - 1; i >= 0; i--)
    {
        ulong ticket = PositionGetTicket(i);
        if(ticket == 0 || !PositionSelectByTicket(ticket)) continue;
        if(PositionGetInteger(POSITION_TYPE) == type &&
           PositionGetString(POSITION_SYMBOL) == _Symbol &&
           IsOurMagic(PositionGetInteger(POSITION_MAGIC)))
            return true;
    }
    return false;
}

bool HasLayeredPositions()
{
    for(int i = PositionsTotal() - 1; i >= 0; i--)
    {
        ulong ticket = PositionGetTicket(i);
        if(ticket == 0 || !PositionSelectByTicket(ticket)) continue;
        if(PositionGetString(POSITION_SYMBOL) != _Symbol) continue;
        if(IsOurMagic(PositionGetInteger(POSITION_MAGIC)))
            return true;
    }
    return false;
}
//+------------------------------------------------------------------+
